@page "/callwebapi"

@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Identity.Web.ITokenAcquisition TokenAcquisition
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

@using Microsoft.Identity.Web

@inject IDownstreamWebApi downstreamAPI
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<h1>Call an API</h1>

<p>This component demonstrates fetching data from a Web API.</p>

@if (apiResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>API Result</h2>
    @apiResult
}

@code {
    private HttpResponseMessage response;
    private string apiResult;
    private List<MailMessage> messages = new List<MailMessage>();

    private string userDisplayName;

    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient();

        var graphToken = "";
        var azureRestToken = "";

        try
        {
            //graphToken = await TokenAcquisition.GetAccessTokenForUserAsync(new string[] { "User.Read", "Calendars.Read", "User.ReadBasic.All", "Mail.Read" });
            graphToken = await TokenAcquisition.GetAccessTokenForUserAsync(new string[] { "User.Read", "Mail.Read", "Calendars.ReadWrite" });
            //azureRestToken = await TokenAcquisition.GetAccessTokenForUserAsync(new string[] { "https://management.azure.com//user_impersonation" });

            // make API call
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", graphToken);

            //var dataRequest = await _httpClient.GetAsync("https://graph.microsoft.com/Calendars.ReadWrite");
            var dataRequest = await _httpClient.GetAsync("https://graph.microsoft.com/v1.0/me/events?$filter=start/datetime ge '2023-07-01T00:00' and end/dateTime le '2023-07-31T00:00'&$select=subject,start,end");

            if (dataRequest.IsSuccessStatusCode)
            {
                //var contentString = await dataRequest.Content.ReadAsStringAsync();


                //var mailData = System.Text.Json.JsonDocument.Parse(await dataRequest.Content.ReadAsStreamAsync());
                //var messagesArray = mailData.RootElement.GetProperty("value").EnumerateArray();

                //foreach (var m in messagesArray)
                //{
                //    var message = new MailMessage();
                //    message.Subject = m.GetProperty("subject").GetString();
                //    message.Sender = m.GetProperty("sender").GetProperty("emailAddress").GetProperty("address").GetString();
                //    message.ReceivedTime = m.GetProperty("receivedDateTime").GetDateTime();
                //    messages.Add(message);
                //}
            }

            //response = await downstreamAPI.CallWebApiForUserAsync(
            //        "DownstreamApi",
            //        options => options.RelativePath = "");

            //if (response.StatusCode == System.Net.HttpStatusCode.OK)
            //{
            //    apiResult = await response.Content.ReadAsStringAsync();
            //}
            //else
            //{
            //    apiResult = "Failed to call the web API";
            //}
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    public class MailMessage
    {
        public string Subject;
        public string Sender;
        public DateTime ReceivedTime;
    }
}
